{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww12540\viewh14820\viewkind1
\deftab720
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\ri0\partightenfactor0

\f0\fs24 \cf0 Lab 1 Worksheet\
\
Answer the following questions by modifying this text file. Add your answer below each question.\
\
1. Where is the assertEquals method defined? What does it do? Can we use assertEquals for more than just int types? (Hint: Consult the API for JUnit)\
	The assertEquals method is defined in the JUnit API. When writing tests, it records if the test has failed. assertEquals can be used for more than just int types, like char, byte, long, short, .Object, and more listed in the API.\
\
2. Briefly describe what each of the three tests is checking.\
	The first test is using an empty array to check the first if statement (if the length of the array is less than 2, return -1). The second test is checking if our method can handle when the array has multiples of the same element. The third array is checking if our method can handle finding the smallest difference when our array isn\'92t in order\
\
3. Why is our unimplemented findSmallestDiff method passing one of the tests?\
	Because the array has no elements, no element is greater or less than the other, so it passes the test for all elements being equal.\
\
\
4. Why are we failing the third test? How should our method be modified to correct this?\
	We\'92re failing the first test because our method only compares numbers that are right next to each other in the array. To correct this, we should sort our array first. \
\
\
5. What is the appropriate call to assertEquals for your new test (test 4)?\
@Test\
public void smallSortedHighToLowArrayEquals() \{\
	assertEquals(4, DiffUtil.findSmallestDiff(arr4));\
\}\
\
\
6. Provide one more test (test 5) for the findSmallestDiff method. Briefly describe your test and write the call to assertEquals here. \
	I also want to test if our method works if sorted from the lowest number to the highest number. \
@Test\
public void smallSortedLowToHighArrayEquals() \{\
	assertEquals(4, DiffUtil.findSmallestDiff(arr5));\
\}\
\
\
7. Briefly describe your unit tests for Assignment 1.\
	I will need to test that my times method can handle balanced and unbalanced matrices, and that my plus method can also handle both balanced and unbalanced matrices. I will need to test that my \'93toString\'94 function produces the correct string to represent a matrix.\
}